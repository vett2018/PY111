type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 84
    length: 1309
    placeholder_text: '...  # TODO реализовать операцию push'
    initial_state:
      length: 20
      offset: 263
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: self._stack.append(elem)
  - offset: 84
    length: 1309
    placeholder_text: '...  # TODO реализовать операцию pop'
    initial_state:
      length: 36
      offset: 497
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      if not self._stack:
                  raise IndexError("Извлечение из пустого стека не возможно")

              return self._stack.pop()
  - offset: 1546
    length: 534
    placeholder_text: '...  # TODO реализовать операцию peek'
    initial_state:
      length: 37
      offset: 1005
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      if not isinstance(ind, int):
                  raise TypeError(f"Индекс должен быть целочисленного типа, а не {type(ind).__name__}")

              if not 0 <= ind < len(self._stack):
                  raise IndexError("Индекс все границ стека")

              inv_ind = -1 - ind
              return self._stack[inv_ind]
  - offset: 2159
    length: 299
    placeholder_text: '...  # TODO реализовать операцию clear'
    initial_state:
      length: 38
      offset: 1112
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: self._stack.clear()
  - offset: 2554
    length: 154
    placeholder_text: '...  # TODO реализовать операцию __len__'
    initial_state:
      length: 40
      offset: 1236
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: return len(self._stack)
  text: |
    from typing import Any


    class Stack:
        def __init__(self):
            self._stack = []

        def push(self, elem: Any) -> None:
            """
            Добавление элемента в вершину стека

            :param elem: Элемент, который должен быть добавлен
            """
            ...  # TODO реализовать операцию push

        def pop(self) -> Any:
            """
            Извлечение элемента из вершины стека.

            :raise: IndexError - Ошибка, если стек пуст

            :return: Извлеченный с вершины стека элемент.
            """
            ...  # TODO реализовать операцию pop

        def peek(self, ind: int = 0) -> Any:
            """
            Просмотр произвольного элемента, находящегося в стеке, без его извлечения.

            :param ind: индекс элемента (отсчет с вершины, 0 - вершина, последний добавленный элемент, 1 - предпоследний элемент, и т.д.)

            :raise: TypeError - если указан не целочисленный тип индекса
            :raise: IndexError - если индекс вне границ стека

            :return: Значение просмотренного элемента
            """
            ...  # TODO реализовать операцию peek

        def clear(self) -> None:
            """ Очистка стека. """
            ...  # TODO реализовать операцию clear

        def __len__(self) -> int:
            """ Количество элементов в стеке. """
            ...  # TODO реализовать операцию __len__
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import Stack


    class TestCase(unittest.TestCase):
        @classmethod
        def setUpClass(cls) -> None:
            cls.my_stack = Stack()

        def setUp(self):
            self.my_stack.clear()

        def test__len__(self):
            self.assertTrue(hasattr(self.my_stack, "__len__"), msg="Стек должен иметь магический метод __len__ для определения размера стека.")

        def test_clear(self):
            self.my_stack.push(3)
            self.my_stack.clear()

            self.assertEqual(0, len(self.my_stack), msg="Точно ли стек был очищен???")

        def test_empty_stack(self):
            with self.assertRaises(IndexError, msg="Если в стеке нет элементов, то pop должен вернуть ошибку"):
                self.my_stack.pop()

        def test_push_pop(self):
            initial_elem = 3
            self.my_stack.push(initial_elem)

            self.assertEqual(
                initial_elem, self.my_stack.pop(),
                msg="Некорректно работают операции push или pop"
            )

        def test_multiple_pushes_pops(self):
            expected_values = list(range(4, 0, -1))
            for value in expected_values[::-1]:
                self.my_stack.push(value)

            for ind, expected_value in enumerate(expected_values):
                with self.subTest(ind=ind, expected_value=expected_value):
                    self.assertEqual(
                        expected_value, self.my_stack.pop(),
                        msg=f"Ожидается значение {expected_value}. Стек работает по принципу LIFO - последний пришел первый вышел"
                    )

            self.assertEqual(0, len(self.my_stack), msg="Стек должен быть пустым")

        def test_peek(self):
            expected_values = [5, 3, 7]
            for value in expected_values[::-1]:
                self.my_stack.push(value)

            for ind, expected_value in enumerate(expected_values):
                with self.subTest(ind=ind, expected_value=expected_value):
                    self.assertEqual(
                        expected_value, self.my_stack.peek(ind),
                        msg=f"Ожидается значение {expected_value}"
                    )

            self.assertEqual(len(expected_values), len(self.my_stack), msg="Стек не должен быть пустым")

        def test_peek_default_ind(self):
            expected_values = [5, 3, 7]
            for value in expected_values:
                self.my_stack.push(value)

            self.assertEqual(
                self.my_stack.peek(), expected_values[-1],
                msg="По умолчанию peep должен возвращать элемент с вершины"
            )

        def test_peek_out_of_range_ind(self):
            expected_values = [5, 3, 7]
            for value in expected_values:
                self.my_stack.push(value)

            with self.assertRaises(TypeError, msg="peek работает только с целочисленными индексами"):
                self.my_stack.peek("incorrect_type_ind")

            with self.assertRaises(IndexError, msg="Если указан неверный индекс, то должна вызываться ошибка"):
                out_of_range_index = len(self.my_stack)
                self.my_stack.peek(out_of_range_index)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: dict.py
  visible: true
  learner_created: true
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 08 Mar 2023 15:43:56 UTC
record: -1
