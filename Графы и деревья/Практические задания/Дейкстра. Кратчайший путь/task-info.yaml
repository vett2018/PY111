type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 693
    length: 82
    placeholder_text: '...  # TODO вернуть стоимость путей до всех вершин посчитанных
      алгоритмом Дейкстры'
    initial_state:
      length: 82
      offset: 693
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      _, coasts = nx.dijkstra_predecessor_and_distance(g, starting_node)
          for node in g.nodes:
              if node not in coasts:
                  coasts[node] = float("inf")

          return coasts
  - offset: 809
    length: 25
    placeholder_text: '...  # TODO записать граф'
    initial_state:
      length: 25
      offset: 809
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      graph = nx.DiGraph()
          graph.add_weighted_edges_from([
              (1, 2, 7),
              (1, 3, 9),
              (1, 6, 14),
              (2, 3, 10),
              (2, 4, 15),
              (3, 4, 11),
              (3, 6, 2),
              (4, 5, 6),
              (5, 6, 9),
          ])
  text: |
    from typing import Hashable, Mapping, Union
    import networkx as nx


    def dijkstra_algo(g: nx.DiGraph, starting_node: Hashable) -> Mapping[Hashable, Union[int, float]]:
        """
        Функция с помощью алгоритма Дейкстры из модуля NetworkX находит кратчайшие пути до всех достижимых вершин графа.
        Если вершина не достижима, то стоимость пути до неё должна быть равно float("inf")

        :param g: Взвешенный направленный граф NetworkX, по которому надо рассчитать стоимости кратчайших путей
        :param starting_node: Стартовый узел, откуда нужно начать обход
        :return: словарь как {'node1': 0, 'node2': 10, '3': 33, ...} со стоимостью путей, где node1, node2 - это узлы из графа g
        """
        ...  # TODO вернуть стоимость путей до всех вершин посчитанных алгоритмом Дейкстры


    if __name__ == '__main__':
        ...  # TODO записать граф

        print(dijkstra_algo(graph, 1))  # {1: 0, 2: 7, 3: 9, 6: 11, 4: 20, 5: 26}
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest
    from typing import Mapping, Hashable

    import networkx as nx

    from task import dijkstra_algo


    class TestCase(unittest.TestCase):
        @staticmethod
        def dict_equal(a: Mapping[Hashable, int], b: Mapping[Hashable, int]):
            for k in a.keys():
                if a[k] != b[k]:
                    return False
            return len(a.keys()) == len(b.keys())

        @classmethod
        def setUpClass(cls):
            cls.G = nx.DiGraph()
            cls.G.add_nodes_from("ABCDEFG")
            cls.G.add_weighted_edges_from([
                ("A", "B", 1),
                ("B", "C", 3),
                ("C", "E", 4),
                ("E", "F", 3),
                ("B", "E", 8),
                ("C", "D", 1),
                ("D", "E", 2),
                ("B", "D", 2),
                ("G", "D", 1),
                ("D", "A", 2),
            ])

        def test_first(self):
            self.assertTrue(
                self.dict_equal(
                    dijkstra_algo(self.G, 'A'),
                    {'A': 0, 'B': 1, 'C': 4, 'D': 3, 'E': 5, 'F': 8, 'G': float("inf")}
                ),
                msg="Результаты неверны. Проверьте реализацию и возвращаемое значение для недостижимых нод (float('inf'))."
            )

        def test_second(self):
            self.assertTrue(
                self.dict_equal(
                    dijkstra_algo(self.G, 'D'),
                    {'A': 2, 'B': 3, 'C': 6, 'D': 0, 'E': 2, 'F': 5, 'G': float('inf')}
                ),
                msg="Результаты неверны. Проверьте реализацию и возвращаемое значение для недостижимых нод (float('inf'))."
            )

        def test_third(self):
            self.assertTrue(
                self.dict_equal(
                    dijkstra_algo(self.G, 'G'),
                    {'A': 3, 'B': 4, 'C': 7, 'D': 1, 'E': 3, 'F': 6, 'G': 0}
                ),
                msg="Результаты неверны. Проверьте реализацию и возвращаемое значение для недостижимых нод (float('inf'))."
            )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: img.png
  visible: true
  learner_created: false
status: Unchecked
record: -1
