type: edu
files:
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    import networkx as nx

    from task import bfs


    class TestCase(unittest.TestCase):
        def test_bfs(self):
            graph = nx.Graph()
            graph.add_nodes_from("ABCDEFGHIJ")
            graph.add_edges_from([
                ('A', 'B'),
                ('A', 'F'),
                ('B', 'G'),
                ('F', 'G'),
                ('G', 'C'),
                ('G', 'H'),
                ('G', 'I'),
                ('C', 'H'),
                ('I', 'H'),
                ('H', 'D'),
                ('H', 'E'),
                ('H', 'J'),
                ('E', 'D'),
            ])
            result = bfs(graph, 'A')
            self.assertEqual(
                10,
                len(result),
                msg="Проверьте возвращаемый список - в него либо затесались лишние элементы, либо не хватает элементов."
            )

            result = \
                [result[0]] \
                + sorted(result[1:3]) \
                + [result[3]] \
                + sorted(result[4:7]) \
                + sorted(result[7:])

            self.assertEqual(
                list("ABFGCHIDEJ"),
                result,
                msg="Возвращаемый список несоответствует нужному порядку обхода."
            )
  learner_created: false
- name: task.py
  visible: true
  placeholders:
  - offset: 561
    length: 38
    placeholder_text: '...  # TODO реализовать обход в ширину'
    initial_state:
      length: 38
      offset: 561
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      visited = {node: False for node in g.nodes}
          d = deque()  # начало слева, конец справа
          path = []

          d.append(start_node)  # поджигаем узел графа
          visited[start_node] = True  # если узел "подожжен", то мы его посещали
          while d:
              current_node = d.popleft()
              path.append(current_node)
              for neighbor in g[current_node]:  # g[current_node] - смежные узлы
                  if not visited[neighbor]:
                      d.append(neighbor)  # поджигаем узел графа
                      visited[neighbor] = True  # если узел "подожжен", то мы его посещали

          return path
  - offset: 633
    length: 72
    placeholder_text: '# TODO записать граф с помощью модуля networkx и прверить обход
      в ширину'
    initial_state:
      length: 72
      offset: 633
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      graph = nx.Graph()
          graph.add_nodes_from("ABCDEFGHIJ")
          graph.add_edges_from([
              ('A', 'B'),
              ('A', 'F'),
              ('B', 'G'),
              ('F', 'G'),
              ('G', 'C'),
              ('G', 'H'),
              ('G', 'I'),
              ('C', 'H'),
              ('I', 'H'),
              ('H', 'D'),
              ('H', 'E'),
              ('H', 'J'),
              ('E', 'D'),
          ])

          print(bfs(graph, "A"))
  text: |
    from typing import Hashable, List
    from collections import deque

    import networkx as nx


    def bfs(g: nx.Graph, start_node: Hashable) -> List[Hashable]:
        """
        Функция выполняет обход в ширину и возвращает список узлов в порядке посещения.
        В данной задаче порядок обхода графа левосторонний или правосторонний не важен,
        главное соблюсти порядок обхода в ширину.

        :param g: Граф NetworkX, по которому нужно совершить обход
        :param start_node: Стартовый узел, откуда нужно начать обход
        :return: Список узлов в порядке посещения.
        """
        ...  # TODO реализовать обход в ширину


    if __name__ == '__main__':
        # TODO записать граф с помощью модуля networkx и прверить обход в ширину
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: img.png
  visible: true
  learner_created: false
status: Unchecked
record: -1
