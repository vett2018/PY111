type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 85
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 85
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if n == 1:
              return 1

          trust_count = [0] * (n + 1)

          for i, j in trust:
              trust_count[i] -= 1
              trust_count[j] += 1

          for i in range(1, n + 1):
              if trust_count[i] == n - 1:
                  return i

          return -1
  text: |
    from typing import List


    def find_judge(n: int, trust: List[List[int]]) -> int:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import find_judge


    class TestSolution(unittest.TestCase):
        def test_find_judge(self):
            self.assertEqual(find_judge(2, [[1, 2]]), 2)
            self.assertEqual(find_judge(3, [[1, 3], [2, 3]]), 3)
            self.assertEqual(find_judge(3, [[1, 3], [2, 3], [3, 1]]), -1)
            self.assertEqual(find_judge(3, [[1, 2], [2, 3]]), -1)
            self.assertEqual(find_judge(1, []), 1)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
