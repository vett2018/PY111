type: edu
files:
- name: __init__.py
  visible: false
  learner_created: false
- name: task.py
  visible: true
  placeholders:
  - offset: 562
    length: 60
    placeholder_text: '...  # TODO реализовать обход в глубину итеративным способом'
    initial_state:
      length: 60
      offset: 562
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      visited = {node: False for node in g.nodes}
          d = deque()  # вершина стека справа
          path = []

          d.append(start_node)  # поджигаем узел графа
          visited[start_node] = True  # если узел "подожжен", то мы его посещали
          while d:
              current_node = d.pop()  # снимаем узел с вершины стека
              path.append(current_node)
              for neighbor in g[current_node]:  # g[current_node] - смежные узлы
                  if not visited[neighbor]:
                      d.append(neighbor)  # добавляем узел на вершину стека
                      visited[neighbor] = True

          return path
  text: |
    from typing import Hashable, List
    from collections import deque

    import networkx as nx


    def dfs(g: nx.Graph, start_node: Hashable) -> List[Hashable]:
        """
        Функция выполняет обход в глубину и возвращает список узлов в порядке посещения.
        В данной задаче порядок обхода графа левосторонний или правосторонний не важен,
        главное соблюсти порядок обхода в ширину.

        :param g: Граф NetworkX, по которому нужно совершить обход
        :param start_node: Стартовый узел, откуда нужно начать обход
        :return: Список узлов в порядке посещения.
        """
        ...  # TODO реализовать обход в глубину итеративным способом
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    import networkx as nx

    from task import dfs


    class TestCase(unittest.TestCase):
        def test_dfs(self):
            graph = nx.Graph()
            graph.add_nodes_from("ABCDEFG")
            graph.add_edges_from([
                ('A', 'B'),
                ('A', 'C'),
                ('B', 'D'),
                ('B', 'E'),
                ('C', 'F'),
                ('E', 'G'),
            ])
            result = dfs(graph, 'A')
            self.assertEqual(
                7,
                len(result),
                msg="Проверьте возвращаемый список - в него либо затесались лишние элементы, либо не хватает элементов."
            )

            self.assertIn(
                result,
                [
                    list('ABDEGCF'),
                    list('ABEGDCF'),
                    list('ACFBDEG'),
                    list('ACFBEGD')
                ],
                msg="Возвращаемый список несоответствует нужному порядку обхода."
            )
  learner_created: false
status: Unchecked
record: -1
