type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 330
    length: 56
    placeholder_text: '...  # TODO найти количество маршрутов до каждой ступени'
    initial_state:
      length: 56
      offset: 330
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if count_stairs < 0:
              raise ValueError("Количество ступеней должно быть не отрицательным числом")

          if count_stairs == 0:
              return [0]

          if count_stairs == 1:
              return [0, 1]

          count_paths = [0] * (count_stairs + 1)
          count_paths[0] = 0
          count_paths[1] = 1

          for i in range(2, count_stairs + 1):  # начиная с 2 до n включительно
              count_paths[i] = count_paths[i-1] + count_paths[i-2]

          return count_paths
  text: |
    from typing import List


    def stairway_path(count_stairs: int) -> List[int]:
        """
        Вычислить количество маршрутов до каждой ступени,
        если мальчик умеет наступать на следующую ступень и перешагивать через одну.

        :param count_stairs: Количество ступеней
        :return: Количество маршрутов до каждой ступени
        """
        ...  # TODO найти количество маршрутов до каждой ступени


    if __name__ == '__main__':
        print(stairway_path(0))  # [0]
        print(stairway_path(5))  # [0, 1, 1, 2, 3, 5]
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import stairway_path


    class TestCase(unittest.TestCase):
        def test_count_paths(self):
            count_paths = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
            count_stairs = len(count_paths)-1
            self.assertEqual(
                count_paths, stairway_path(count_stairs),
                msg=f"Не правильно :( До ступени {count_stairs} количество маршрутов должно быть {count_paths}."
            )

        def test_negative_stair(self):
            with self.assertRaises(ValueError, msg="Что такое отрицательное количество ступеней? Должна вызываться ошибка"):
                stairway_path(-35)

        def test_zero_stair(self):
            self.assertEqual(
                [0], stairway_path(0),
                msg=f"Нет ступеней - нет маршрутов :)"
            )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: stairs_paths.png
  visible: true
  learner_created: false
status: Unchecked
record: -1
