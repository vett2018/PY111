type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 481
    length: 441
    placeholder_text: '...  # TODO реализовать ленивую динамику'
    initial_state:
      length: 40
      offset: 481
    initialized_from_dependency: false
    selected: true
    status: Failed
    encrypted_possible_answer: |-
      @lru_cache
          def lazy_method(stairway, n):
              if n == 0 or n == 1:
                  return stairway[n]

              return stairway[n] + min(lazy_method(stairway, n - 1),
                                       lazy_method(stairway, n - 2))

          return lazy_method(stairway, len(stairway)-1)
  text: |
    from typing import Union, Sequence
    from functools import lru_cache


    def stairway_path(stairway: Sequence[Union[float, int]]) -> Union[float, int]:
        """
        Рассчитайте минимальную стоимость подъема на верхнюю ступень,
        если мальчик умеет наступать на следующую ступень и перешагивать через одну.

        :param stairway: список целых чисел, где каждое целое число является стоимостью конкретной ступени
        :return: минимальная стоимость подъема на верхнюю ступень
        """
        ...  # TODO реализовать ленивую динамику


    if __name__ == '__main__':
        print(stairway_path((1, 3, 1, 5)))  # 7
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import stairway_path


    class TestCase(unittest.TestCase):
        def test_some_stairs_coats(self):
            params = [
                # expected_value, stairs_coats
                (26, (1, 3, 1, 5, 2, 7, 7, 8, 9, 4, 6, 3)),
                (19, (4, 4, 3, 2, 3, 4, 5, 9, 1, 2, 4, 2)),
                (72, (5, 11, 43, 2, 23, 43, 22, 12, 6, 8)),
                (41, (4, 12, 32, 22, 1, 7, 0, 12, 4, 2, 2))
            ]
            for expected_value, stairs_coats in params:
                with self.subTest(expected_value=expected_value, stairs_coats=stairs_coats):
                    self.assertEqual(
                        expected_value, stairway_path(stairs_coats),
                        msg="Ожидаемый результат не сошелся с фактическим :("
                    )

        def test_one_stair(self):
            stairs_coats = (10, )
            self.assertEqual(
                stairs_coats[0], stairway_path(stairs_coats),
                msg="Лестница с одной ступенью тоже лестница. Выбор не велик, просто наступаем на эту ступень"
            )

        def test_two_stairs(self):
            stairs_coats = (100000, 5)
            self.assertEqual(
                stairs_coats[1], stairway_path(stairs_coats),
                msg="Если ступеней всего две, то как ни крути дешевле наступить сразу на вторую"
            )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Failed
feedback:
  message: '10 != None : Лестница с одной ступенью тоже лестница. Выбор не велик,
    просто наступаем на эту ступень'
  time: Tue, 07 Mar 2023 15:43:41 UTC
  expected: 10
  actual: None
record: -1
