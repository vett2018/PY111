type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 48
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 48
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      i, j = 0, 0
          while i < len(s) and j < len(t):
              if s[i] == t[j]:
                  i += 1
              j += 1
          return i == len(s)
  text: |
    def is_subsequence(s: str, t: str) -> bool:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import is_subsequence


    class TestIsSubsequence(unittest.TestCase):
        def test_is_subsequence(self):
            self.assertTrue(is_subsequence("abc", "ahbgdc"))
            self.assertFalse(is_subsequence("axc", "ahbgdc"))
            self.assertTrue(is_subsequence("", "ahbgdc"))
            self.assertFalse(is_subsequence("abcd", "ahbgdc"))
            self.assertFalse(is_subsequence("acd", "ahbgdc"))
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
