type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 42
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 42
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      m, n = len(s), len(p)
          dp = [[False] * (n + 1) for _ in range(m + 1)]
          dp[0][0] = True
          for j in range(1, n + 1):
              if p[j - 1] == '*':
                  dp[0][j] = dp[0][j - 1]
          for i in range(1, m + 1):
              for j in range(1, n + 1):
                  if p[j - 1] != '*':
                      dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '?')
                  else:
                      dp[i][j] = dp[i][j - 1] or dp[i - 1][j]
          return dp[m][n]
  text: |
    def is_match(s: str, p: str) -> bool:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import is_match


    class TestIsMatch(unittest.TestCase):
        def test_isMatch(self):
            self.assertEqual(is_match("aa", "a*"), True)
            self.assertEqual(is_match("mississippi", "m??*ss*?i*pi"), False)
            self.assertEqual(is_match("ab", ".*"), False)
            self.assertEqual(is_match("aab", "c*a*b"), False)
            self.assertEqual(is_match("aa", "a"), False)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
