type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 66
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 66
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      n = len(height)
          left, right = 0, n - 1
          left_max, right_max = 0, 0
          res = 0
          while left < right:
              if height[left] < height[right]:
                  if height[left] >= left_max:
                      left_max = height[left]
                  else:
                      res += left_max - height[left]
                  left += 1
              else:
                  if height[right] >= right_max:
                      right_max = height[right]
                  else:
                      res += right_max - height[right]
                  right -= 1
          return res
  text: |
    from typing import List


    def trap(height: List[int]) -> int:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import trap


    class TestTrap(unittest.TestCase):
        def test_trap(self):
            self.assertEqual(trap([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]), 6)
            self.assertEqual(trap([4, 2, 0, 3, 2, 4, 3, 4]), 10)
            self.assertEqual(trap([5, 5, 1, 7, 1, 1, 5, 2, 7, 6]), 23)
            self.assertEqual(trap([2, 0, 2]), 2)
            self.assertEqual(trap([3, 0, 0, 2, 0, 4]), 10)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: img.png
  visible: true
  learner_created: false
status: Unchecked
record: -1
