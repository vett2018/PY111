type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 342
    length: 40
    placeholder_text: '... # TODO реализуйте подсчет ходов коня'
    initial_state:
      length: 40
      offset: 342
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      rows, cols = shape  # кол-во строк и столбцов отсчет с 1

          @lru_cache  # @lru_cache(maxsize=None) == lru_cache
          def get_steps(i, j):
              if i == 0 and j == 0:  # левый верхний угол
                  return 1

              if not 0 <= i < rows:  # выпадаю за границы поля для строк
                  return 0

              if not 0 <= j < cols:  # выпадаю за границы поля для строк
                  return 0

              return sum([
                  get_steps(i - 2, j + 1),
                  get_steps(i - 2, j - 1),
                  get_steps(i - 1, j - 2),
                  get_steps(i + 1, j - 2),
              ])

          return get_steps(rows-1, cols-1)
  text: |
    from typing import Tuple
    from functools import lru_cache


    def calculate_paths(shape: Tuple[int, int]) -> int:
        """
        Дано поле с размером rows*cols посчитать количество ходов коня из верхнего левого угла в нижний правый

        :param shape: размер доски в виде кортежа
        :return: количество путей согласно заданным условиям
        """
        ... # TODO реализуйте подсчет ходов коня


    if __name__ == '__main__':
        print(calculate_paths((4, 4)))  # 2
        print(calculate_paths((7, 15)))  # 13309
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import calculate_paths


    class TestCase(unittest.TestCase):
        def test_1(self):
            params = [  # expected_value, table_size
                (2, (4, 4)),
                (7884330, (15, 14)),
                (13309, (7, 15)),
                (1, (3, 2))
            ]
            for expected_value, table_size in params:
                with self.subTest(expected_value=expected_value, table_size=table_size):
                    self.assertEqual(
                        expected_value, calculate_paths(table_size),
                        msg="Неверный расчет :("
                    )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
- name: img.png
  visible: true
  learner_created: false
status: Unchecked
record: -1
