type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 86
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 86
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      dict_ = {target - val: idx for idx, val in enumerate(nums)}
          for idx, val in enumerate(nums):
              if dict_.get(val) and not dict_[val] == idx:
                  return [dict_[val], idx]
  text: |
    from typing import List


    def two_sum(nums: List[int], target: int) -> List[int]:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |-
    import unittest

    from task import two_sum


    class TestTwoSum(unittest.TestCase):
        def test_case_1(self):
            nums = [2, 7, 11, 15]
            target = 9
            self.assertIn(two_sum(nums, target), [[0, 1], [1, 0]])

        def test_case_2(self):
            nums = [3, 2, 4]
            target = 6
            self.assertIn(two_sum(nums, target), [[1, 2], [2, 1]])

        def test_case_3(self):
            nums = [3, 3]
            target = 6
            self.assertIn(two_sum(nums, target), [[0, 1], [1, 0]])
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
