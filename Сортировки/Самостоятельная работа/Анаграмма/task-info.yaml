type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 44
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 44
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if len(s) != len(t):
              return False

          s_dict = {}
          t_dict = {}
          for i in range(len(s)):
              if s[i] in s_dict:
                  s_dict[s[i]] += 1
              else:
                  s_dict[s[i]] = 1

              if t[i] in t_dict:
                  t_dict[t[i]] += 1
              else:
                  t_dict[t[i]] = 1

          return s_dict == t_dict
  text: |
    def is_anagram(s: str, t: str) -> bool:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import is_anagram


    class TestIsAnagram(unittest.TestCase):

        def test_is_anagram(self):
            s = "anagram"
            t = "nagaram"
            result = is_anagram(s, t)
            self.assertTrue(result)

            s = "rat"
            t = "car"
            result = is_anagram(s, t)
            self.assertFalse(result)

            s = "a"
            t = "ab"
            result = is_anagram(s, t)
            self.assertFalse(result)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
