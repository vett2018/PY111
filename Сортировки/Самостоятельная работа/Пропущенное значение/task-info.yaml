type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 74
    length: 3
    placeholder_text: '...'
    initial_state:
      length: 3
      offset: 74
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      n = len(nums)
          return n * (n + 1) // 2 - sum(nums)
  text: |
    from typing import List


    def missing_number(nums: List[int]) -> int:
        ...
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest

    from task import missing_number


    class TestMissingNumber(unittest.TestCase):
        def test_missing_number(self):
            nums = [3, 0, 1]
            result = missing_number(nums)
            self.assertEqual(result, 2)

            nums = [9, 6, 4, 2, 3, 5, 7, 0, 1]
            result = missing_number(nums)
            self.assertEqual(result, 8)

            nums = [0]
            result = missing_number(nums)
            self.assertEqual(result, 1)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
